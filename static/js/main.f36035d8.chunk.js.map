{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["drumElements","id","actionKey","source","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDisplay","newSound","setState","displaySound","state","bind","assertThisInitialized","_this2","react_default","a","createElement","className","Paper_default","Typography_default","variant","map","i","App_DrumPadElement","key","sound","Component","DrumPadElement","handleKeyDown","e","keyCode","_this3","props","charCodeAt","audio","play","currentTime","handleDrumClick","document","addEventListener","window","focus","removeEventListener","_this4","Button_default","onClick","color","size","src","ref","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAOMA,EAAe,CACnB,CAACC,GAAG,SAAUC,UAAU,IAAKC,OAAO,qFACpC,CAACF,GAAG,SAAUC,UAAU,IAAKC,OAAO,qFACpC,CAACF,GAAG,OAAQC,UAAU,IAAKC,OAAO,qFAClC,CAACF,GAAG,QAASC,UAAU,IAAKC,OAAO,qFACnC,CAACF,GAAG,MAAOC,UAAU,IAAKC,OAAO,oFACjC,CAACF,GAAG,UAAWC,UAAU,IAAKC,OAAO,qFACrC,CAACF,GAAG,QAASC,UAAU,IAAKC,OAAO,qFACnC,CAACF,GAAG,QAASC,UAAU,IAAKC,OAAO,qFACnC,CAACF,GAAG,MAAOC,UAAU,IAAKC,OAAO,qFAG7BC,cACJ,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMFI,cAAgB,SAAAC,GACdR,EAAKS,SAAS,CAAEC,aAAaF,KAN7BR,EAAKW,MAAM,CACPD,aAAa,mBAEjBV,EAAKO,cAAgBP,EAAKO,cAAcK,KAAnBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KALVA,wEAWJ,IAAAc,EAAAX,KACP,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMtB,GAAG,gBACtBmB,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAOpB,GAAG,iBACRmB,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAYK,QAAQ,KAAKzB,GAAG,WACzBO,KAAKQ,MAAMD,eAGhBK,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAOpB,GAAG,YAEND,EAAa2B,IAAI,SAAAC,GAAC,OAChBR,EAAAC,EAAAC,cAACO,EAAD,CACEC,IAAKF,EAAE3B,GACP8B,MAAOH,EAAE3B,GACTC,UAAW0B,EAAE1B,UACbC,OAAQyB,EAAEzB,OACVS,cAAeO,EAAKP,2BA5BlBoB,aAuCZC,6MAQJC,cAAgB,SAAAC,GACXA,EAAEC,UAAYC,EAAKC,MAAMpC,UAAUqC,eACpCF,EAAKG,MAAMC,OACXJ,EAAKG,MAAME,YAAc,EACzBL,EAAKC,MAAM1B,cAAcyB,EAAKC,MAAMP,WAGxCY,gBAAkB,WAChBN,EAAKG,MAAMC,OACXJ,EAAKG,MAAME,YAAc,EACzBL,EAAKC,MAAM1B,cAAcyB,EAAKC,MAAMP,2FAhBpCa,SAASC,iBAAiB,UAAWrC,KAAK0B,eAC1CY,OAAOC,uDAGPH,SAASI,oBAAoB,UAAWxC,KAAK0B,gDAcvC,IAAAe,EAAAzC,KACN,OACIY,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,CACEE,UAAU,WACVtB,GAAIO,KAAK8B,MAAMP,MACfoB,QAAS3C,KAAKmC,gBACdS,MAAM,UACN1B,QAAQ,WACR2B,KAAK,SAEJ7C,KAAK8B,MAAMpC,UACZkB,EAAAC,EAAAC,cAAA,SACEC,UAAW,OACX+B,IAAK9C,KAAK8B,MAAMnC,OAChBF,GAAIO,KAAK8B,MAAMpC,UACfqD,IAAK,SAAAA,GAAG,OAAIN,EAAKT,MAAQe,aAnCRvB,aA0Cd5B,ICxFKoD,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASlB,SAASmB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f36035d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst drumElements = [\n  {id:'Splash', actionKey:'Q', source:'https://audio-previews.elements.envatousercontent.com/files/135160778/preview.mp3'},\n  {id:'Parrot', actionKey:'W', source:'https://audio-previews.elements.envatousercontent.com/files/148020959/preview.mp3'},\n  {id:'Bird', actionKey:'E', source:'https://audio-previews.elements.envatousercontent.com/files/146374366/preview.mp3'},\n  {id:'Horse', actionKey:'A', source:'https://audio-previews.elements.envatousercontent.com/files/136172320/preview.mp3'},\n  {id:'Dog', actionKey:'S', source:'https://audio-previews.elements.envatousercontent.com/files/25472138/preview.mp3'},\n  {id:'Thunder', actionKey:'D', source:'https://audio-previews.elements.envatousercontent.com/files/140207732/preview.mp3'},\n  {id:'Raven', actionKey:'Z', source:'https://audio-previews.elements.envatousercontent.com/files/133547872/preview.mp3'},\n  {id:'Sheep', actionKey:'X', source:'https://audio-previews.elements.envatousercontent.com/files/133976703/preview.mp3'},\n  {id:'Cow', actionKey:'C', source:'https://audio-previews.elements.envatousercontent.com/files/79938040/preview.mp3'}\n]\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n        displaySound:'Play Something!'\n    }\n    this.handleDisplay = this.handleDisplay.bind(this)\n  }\n  handleDisplay = newSound => {\n    this.setState({ displaySound:newSound })\n  }\n\n  render() {\n    return (\n      <div className=\"App\" id=\"drum-machine\">\n        <Paper id=\"display-paper\">\n          <Typography variant=\"h3\" id=\"display\">\n            {this.state.displaySound}\n          </Typography>\n        </Paper>\n        <Paper id=\"drum-kit\">\n          {\n            drumElements.map(i => (\n              <DrumPadElement\n                key={i.id} \n                sound={i.id} \n                actionKey={i.actionKey} \n                source={i.source} \n                handleDisplay={this.handleDisplay}\n              />\n            ))\n          }\n\n        </Paper>\n      </div>\n    );\n  }\n}\n\nclass DrumPadElement extends Component {\n  componentDidMount () {\n    document.addEventListener('keydown', this.handleKeyDown)\n    window.focus()\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown)\n  }\n  handleKeyDown = e => {\n    if(e.keyCode === this.props.actionKey.charCodeAt()) {\n      this.audio.play()\n      this.audio.currentTime = 0\n      this.props.handleDisplay(this.props.sound)\n    }\n  }\n  handleDrumClick = () => {\n    this.audio.play()\n    this.audio.currentTime = 0\n    this.props.handleDisplay(this.props.sound)\n  }\n  render(){\n    return(\n        <Button \n          className='drum-pad'\n          id={this.props.sound}\n          onClick={this.handleDrumClick}\n          color='primary'\n          variant='outlined'\n          size='large'\n        >\n          {this.props.actionKey}\n          <audio \n            className={'clip'}\n            src={this.props.source} \n            id={this.props.actionKey}\n            ref={ref => this.audio = ref}>\n          </audio>\n        </Button>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}